# The contents below were provided by the Packer Vagrant post-processor

Vagrant.configure("2") do |config|
  config.vm.base_mac = "08002724106C"
end

# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'socket'
require 'timeout'
require 'fileutils'
require 'yaml'

# Loads the extended YAML configuration which might not exist. Either way the 
# smart defaults in the extconf below will be overwritten using the
# config_by_layout function that uses directory structure to infer config
# settings.
extconf_file = "subutai.yaml"

# Start with some smart defaults
extconf = {
  "desiredPort"     => 9999,       # integer for console port
  "allowInsecure"   => false,      # boolean to enable insecure CDN and snap
  "subutaiEnv"      => "prod",     # subutai environment to use
  "subutaiPeer"     => false,      # whether or not to provision the managemetn console (peer)
  "subutaiSnap"     => nil,        # alternative snap to provision
  "subutaiManTmpl"  => nil         # alternative subutai management template to provision
}

# Exit hook to save or restore configurations
at_exit do
  # we save and restore based on the vagrant command
  command = ARGV[0]
  puts "Arguments provided to vagrant"
  ARGV.each { |i| puts i }
  puts "Exit hook on command #{command}"
end

# Override smart defaults if extended yaml configuration exists
if File.exist?(extconf_file)
  extconf = YAML.load_file(extconf)
end

# Generate random mac address
# ---------------------------
def gen_mac()
  # starting with 08:00:27 to not freakout vbox
  mac = '080027' + 3.times.map { '%02x' % rand(0..255) }.join()
  return mac
end

# Finds an available port
# -----------------------
def is_port_open?(host, port)
  Timeout.timeout(1) do
    s = TCPSocket.new(host, port)
    s.close rescue nil

    return true
  end
rescue Timeout::Error, Errno::ECONNREFUSED, Errno::EHOSTUNREACH, \
       Errno::ENETUNREACH, Errno::EACCES, Errno::ENOTCONN, \
       Errno::EADDRNOTAVAIL
  return false
end

# Finds free port for console and records it in configs
# -----------------------------------------------------
def find_console_port(port)
  while is_port_open?("127.0.0.1", port)
    port += 1
  end

  console_port_file = ".vagrant/machines/default/virtualbox/console_port"
  file_parent = ".vagrant/machines/default/virtualbox/"
  if File.exists?(file_parent) && File.exists?(console_port_file)
    portText = IO.read(console_port_file)
    return portText.to_i
  else 
    FileUtils::mkdir_p(file_parent)
    IO.write(console_port_file, "#{port}")
  end 

  return port
end

# Extracts configuration from the directory path
# ----------------------------------------------
def config_by_layout()
  list = File.expand_path(Dir.pwd).split('/')
  list.delete_at(0)

  if ! list.include? "subutai" then
    puts "No subutai root, stopped config by layout"
    return nil
  end
  
  # if list.indexes().size = 1
  #   index = list.index "subutai"
  # else
  #   index = list.rindex "subutai"
  # end

  # subutaiEnv = list[index+1]
  # provisionType = list[index+2]
  # boxName = list[index+3]

  return nil
end

def layout_convention()
  list = File.expand_path(Dir.pwd).split('/')
  list.delete_at(0)
  # root = find_subutai_root()

  # if root != nil then
  #   puts "Not following directory layout conventions. Abandoning configuration by layout."
  # end
end 

config_by_layout()
extconf.store('consolePort', find_console_port(extconf['desiredPort']))
box_path = File.dirname(__FILE__)

Vagrant.require_version ">= 2.0.1"

Vagrant.configure("2") do |config|
  config.vm.base_mac = gen_mac()
  config.vm.box = "subutai/nobridge"
  config.ssh.username = "subutai"
  config.ssh.password = "ubuntai"

  config.vm.network "private_network", :type => 'dhcp', nic_type: "virtio"
  config.vm.network "forwarded_port", guest: 8443, host: extconf['consolePort']

  config.vm.provider "virtualbox" do |vb|
    vb.memory = "4096"
    vb.cpus = 2

    # To avoid the Sierra bug let's turn off things we do not need
    # See here: https://github.com/monetate/ectou-export/issues/5
    vb.customize ["modifyvm", :id, "--audio", "none"]
    vb.customize ["modifyvm", :id, "--uart1", "off"]
    vb.customize ["modifyvm", :id, "--uart2", "off"]
    vb.customize ["modifyvm", :id, "--uart3", "off"]
    vb.customize ["modifyvm", :id, "--uart4", "off"]

    vb.linked_clone = true
  end

  config.vm.provision "shell", env: {
      "CONSOLE_PORT"     => "#{extconf['consolePort']}",
      "ALLOW_INSECURE"   => "#{extconf['allowInsecure']}",    
      "SUBUTAI_ENV"      => "#{extconf['subutaiEnv']}",      
      "SUBUTAI_PEER"     => "#{extconf['subutaiPeer']}",      
      "SUBUTAI_SNAP"     => "#{extconf['subutaiSnap']}",      
    }, path: "https://raw.githubusercontent.com/subutai-io/packer/master/nobridge/provisioning_scripts/en/provisioner.sh"
end

